// Package preserveoriginaloperationidcasinginembeddedspec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package preserveoriginaloperationidcasinginembeddedspec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/oapi-codegen/oapi-codegen/v2/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7zPwUr1MBAF4Ff5Oev03v66y+4iLkQQwQeQ3HRsR9tkyAzCpeTdJenKF3B1woEcvtnB",
	"6SPD7zC2leCx3f6pUITDNxXlnODx/zSeRlSHLJSCMDzue+UgwRZt/89C1nKilYzaKwuVYJzT0wQPW1gH",
	"1iEMX3QN10uaHsJG6/vby+X5EQ6FVHJS6mN349gi5mSU+mwQWTn2ufOnNtUOjQttoeNv0uxqhdOMWqvD",
	"RBoLix0XHN18EH/DZrJXsj8R1Fp/AgAA//9pDRH+cQEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi.T, err error) {
	resolvePath := PathToRawSpec("")
	_ = resolvePath // TODO: Use resolvePath when ReadFromURIFunc is implemented

	loader := openapi.NewLoader()
	loader.IsExternalRefsAllowed = true
	// TODO: Add ReadFromURIFunc support to our abstraction layer
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	// Use LoadFromDataWithBasePath with current directory as base path
	swagger, err = loader.LoadFromDataWithBasePath(specData, ".")
	if err != nil {
		return
	}
	return
}
