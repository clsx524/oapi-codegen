// Package packagea provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package packagea

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/oapi-codegen/oapi-codegen/v2/internal/test/externalref/packageB"
	"github.com/oapi-codegen/oapi-codegen/v2/pkg/openapi"
)

const (
	Api_keyScopes       = "api_key.Scopes"
	Petstore_authScopes = "petstore_auth.Scopes"
)

// Defines values for OrderStatus.
const (
	Approved  OrderStatus = "approved"
	Delivered OrderStatus = "delivered"
	Placed    OrderStatus = "placed"
)

// Defines values for PetStatus.
const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// Defines values for FindPetsByStatusParamsStatus.
const (
	FindPetsByStatusParamsStatusAvailable FindPetsByStatusParamsStatus = "available"
	FindPetsByStatusParamsStatusPending   FindPetsByStatusParamsStatus = "pending"
	FindPetsByStatusParamsStatusSold      FindPetsByStatusParamsStatus = "sold"
)

// Address defines model for Address.
type Address struct {
	City   *string `json:"city,omitempty"`
	State  *string `json:"state,omitempty"`
	Street *string `json:"street,omitempty"`
	Zip    *string `json:"zip,omitempty"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Customer defines model for Customer.
type Customer struct {
	Address  *[]Address `json:"address,omitempty"`
	Id       *int64     `json:"id,omitempty"`
	Username *string    `json:"username,omitempty"`
}

// Order defines model for Order.
type Order struct {
	Complete *bool      `json:"complete,omitempty"`
	Id       *int64     `json:"id,omitempty"`
	PetId    *int64     `json:"petId,omitempty"`
	Quantity *int32     `json:"quantity,omitempty"`
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// Status Order Status
	Status *OrderStatus `json:"status,omitempty"`
}

// OrderStatus Order Status
type OrderStatus string

// Pet defines model for Pet.
type Pet struct {
	Category  *Category `json:"category,omitempty"`
	Id        *int64    `json:"id,omitempty"`
	Name      string    `json:"name"`
	PhotoUrls []string  `json:"photoUrls"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   *[]Tag     `json:"tags,omitempty"`
}

// PetStatus pet status in the store
type PetStatus string

// Tag defines model for Tag.
type Tag struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// UserStatus User Status
	UserStatus *int32  `json:"userStatus,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// FindPetsByStatusParams defines parameters for FindPetsByStatus.
type FindPetsByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status *FindPetsByStatusParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// FindPetsByStatusParamsStatus defines parameters for FindPetsByStatus.
type FindPetsByStatusParamsStatus string

// FindPetsByTagsParams defines parameters for FindPetsByTags.
type FindPetsByTagsParams struct {
	// Tags Tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// DeletePetParams defines parameters for DeletePet.
type DeletePetParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdatePetWithFormParams defines parameters for UpdatePetWithForm.
type UpdatePetWithFormParams struct {
	// Name Name of pet that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of pet that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	// AdditionalMetadata Additional Metadata
	AdditionalMetadata *string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = Pet

// AddPetFormdataRequestBody defines body for AddPet for application/x-www-form-urlencoded ContentType.
type AddPetFormdataRequestBody = Pet

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetJSONRequestBody = Pet

// UpdatePetFormdataRequestBody defines body for UpdatePet for application/x-www-form-urlencoded ContentType.
type UpdatePetFormdataRequestBody = Pet

// PlaceOrderJSONRequestBody defines body for PlaceOrder for application/json ContentType.
type PlaceOrderJSONRequestBody = Order

// PlaceOrderFormdataRequestBody defines body for PlaceOrder for application/x-www-form-urlencoded ContentType.
type PlaceOrderFormdataRequestBody = Order

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUserFormdataRequestBody defines body for CreateUser for application/x-www-form-urlencoded ContentType.
type CreateUserFormdataRequestBody = User

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputJSONRequestBody = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserFormdataRequestBody defines body for UpdateUser for application/x-www-form-urlencoded ContentType.
type UpdateUserFormdataRequestBody = User

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../packageB/spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi.T, err error) {
	resolvePath := PathToRawSpec("")
	_ = resolvePath // TODO: Use resolvePath when ReadFromURIFunc is implemented

	loader := openapi.NewLoader()
	loader.IsExternalRefsAllowed = true
	// TODO: Add ReadFromURIFunc support to our abstraction layer
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	// Use LoadFromDataWithBasePath with current directory as base path
	swagger, err = loader.LoadFromDataWithBasePath(specData, ".")
	if err != nil {
		return
	}
	return
}
