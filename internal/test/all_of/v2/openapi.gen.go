// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/oapi-codegen/oapi-codegen/v2/pkg/openapi"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ProductDetailsStatus.
const (
	Active       ProductDetailsStatus = "active"
	Discontinued ProductDetailsStatus = "discontinued"
	Draft        ProductDetailsStatus = "draft"
	Pending      ProductDetailsStatus = "pending"
)

// Person These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type Person struct {
	FirstName          string `json:"FirstName"`
	GovernmentIDNumber *int64 `json:"GovernmentIDNumber,omitempty"`
	LastName           string `json:"LastName"`
}

// PersonProperties These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type PersonProperties struct {
	FirstName          *string `json:"FirstName,omitempty"`
	GovernmentIDNumber *int64  `json:"GovernmentIDNumber,omitempty"`
	LastName           *string `json:"LastName,omitempty"`
}

// PersonWithID These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type PersonWithID struct {
	FirstName          string `json:"FirstName"`
	GovernmentIDNumber *int64 `json:"GovernmentIDNumber,omitempty"`
	LastName           string `json:"LastName"`
}

// Product Base product schema
type Product struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// ProductDetails Base product schema
type ProductDetails struct {
	// Category Category
	Category *string `json:"category,omitempty"`

	// DisplayName Display name
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`

	// Status The status of the product
	Status *ProductDetailsStatus `json:"status,omitempty"`
}

// ProductDetailsStatus The status of the product
type ProductDetailsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVzY7bNhB+lQHbo2Bv0KIH3dI4DQwUqYE23UO86I7JkcWUGrLkaB3B8LsXpOQ/eIPs",
	"+kSD4jfz/Qy5V9p3wTOxJFXvVdItdViWK4rJc16hc380qv68Vz9GalStfpifT82nI/Px+1X0gaJYSupQ",
	"7VWk/3obyaj6s/rNxiQfsSNVqd9xWj4cHiplKOlog9hcT/3V2gQ2AUIokBXsrLTQIRsUHwdoMhAgG3CY",
	"BBg7qmDTC/gCgQ6WizVz320ozqDA7XzvDGwIIkkfmQxsBkB4/EDyCEkGR/B2tZzBPUFHcUsgLU3l1xxO",
	"nMZOkL20FOHPwhx2rdUteHYDhOifrKEER97QWHImzdasKiVDIFUrv/lCWtShUjeS1fsbLSgRYKQJCKRF",
	"gRRI22Y4KZRJ0lA+Q+dOMlRZozWfuPdp4s3w+N7YS+ZAbIK3LBXsWooEhLrNJhyxRgbhqtWzofX+SC5J",
	"tLzN5D74J4rcEcty8bF4kT9rfOxQVK0syy8/n0WxLLSlmA+esnGLevimiPdW2uXitWktGb0mNYJ8t81D",
	"dZXt5eIlSYZI2kcDmM45bKLvAOFdJBQ62TCDpYD2LGg5rTm7mhM5hcA3gLC6HA5kQGPsFP9IyfdRE3z6",
	"tFx8K3vRm17LbeR+xUQ5yHkXRrlunLfmSqS+t+Zc4xwBfoWLY8EFCVqXXuHjROPWSI1CWx+HW4bvjjuV",
	"oq/YBZdbee9IS/RsdXqOirEpOBz+OVK6RlyMu+UqukK9t2ZLAqvonwNNgtI/P/Uw7mWry1U00awUcd/l",
	"xJmITf6PWuxTLmpsyoGx3FM2IxCbXOah+r78t8GlJKBzEBofoTgx5ewcsotb0TJoHyNpgTETszWX7Bvq",
	"PCeJKJSOPAJF2OEA4oG+CrEBnGJ2U+J8eR5y15YbX+JkpYibu0zwtnRXopHKQVWpJ4ppZPJmdje7y1r7",
	"QIzBqlr9NLubvckKobRF/HlwqKn1zox31JaeGYu/0dny/iTYIQuggKP8/HgmyFAVJA+SWXf470i3gxZD",
	"GMYJzMQxgy2NqtXqomS+SlLwnI4vQIO9Ky1kQ4nLEkNwVheA+ZfpYZ6ms37RiBxHq0h5ze2S/6H8/g8A",
	"AP//YEsb5RgIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi.T, err error) {
	resolvePath := PathToRawSpec("")
	_ = resolvePath // TODO: Use resolvePath when ReadFromURIFunc is implemented

	loader := openapi.NewLoader()
	loader.IsExternalRefsAllowed = true
	// TODO: Add ReadFromURIFunc support to our abstraction layer
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	// Use LoadFromDataWithBasePath with current directory as base path
	swagger, err = loader.LoadFromDataWithBasePath(specData, ".")
	if err != nil {
		return
	}
	return
}
