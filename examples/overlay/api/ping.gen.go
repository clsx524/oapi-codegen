// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/oapi-codegen/v2/pkg/openapi"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`

	// Seed The seed for the internal randomness. SHOULD NOT be explained to users
	Seed    *float32 `json:"seed,omitempty"`
	Verbose *bool    `json:"verbose,omitempty"`
}

// PutAdminUsersResetPasswordJSONBody defines parameters for PutAdminUsersResetPassword.
type PutAdminUsersResetPasswordJSONBody struct {
	NotDocumented *openapi_types.UUID `json:"not_documented,omitempty"`
	Username      string              `json:"username"`
}

// PutAdminUsersResetPasswordJSONRequestBody defines body for PutAdminUsersResetPassword for application/json ContentType.
type PutAdminUsersResetPasswordJSONRequestBody PutAdminUsersResetPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /admin/autoscaling)
	GetAdminAutoscaling(w http.ResponseWriter, r *http.Request)

	// (PUT /admin/users/reset-password)
	PutAdminUsersResetPassword(w http.ResponseWriter, r *http.Request)

	// (GET /healthz)
	GetHealthz(w http.ResponseWriter, r *http.Request)

	// (DELETE /ping)
	DeletePing(w http.ResponseWriter, r *http.Request)

	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAdminAutoscaling operation middleware
func (siw *ServerInterfaceWrapper) GetAdminAutoscaling(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminAutoscaling(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminUsersResetPassword operation middleware
func (siw *ServerInterfaceWrapper) PutAdminUsersResetPassword(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminUsersResetPassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePing operation middleware
func (siw *ServerInterfaceWrapper) DeletePing(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/admin/autoscaling", wrapper.GetAdminAutoscaling).Methods("GET")

	r.HandleFunc(options.BaseURL+"/admin/users/reset-password", wrapper.PutAdminUsersResetPassword).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/healthz", wrapper.GetHealthz).Methods("GET")

	r.HandleFunc(options.BaseURL+"/ping", wrapper.DeletePing).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/ping", wrapper.GetPing).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVTW/bMAz9KwK3wwakUdbdfMvQYS0wLMbanoZikG0mVmGTmkT3Y4X/+yDZbrPWKwqs",
	"J8f0ox4fHxndQcmtY0KSANkdhLLG1qSfOdMuPp1nh14spqizQxRvTOsahAxcxC1Abl18C+Ijol9AQKwi",
	"ssJQeuvEMkEGZzWq+EVt2SupUVkS9GQa5Q1V3BKGsFSnx5vzr0fq2+ZMFajwxjXGElZKWHUBfXjgo64t",
	"0Ee+K/QFB4yU47eCuUFDsICbg4kGMvEd9v0CPP7qrI81/hhUXdwfysUllgJ9hFnacjrTSpL7eRAeS7FU",
	"2dIIqpqvx9KSpI1DWucnanOFvjG3Kjgs7TZCLZN6V4u4kGm9s1J3xbLkVm/WJ3pEH5zuo99DEhaG5n1Y",
	"rparqJUdknEWMviYQgtwRupkkDZVa0mbTjiUphnt2qHER3QynXtSQQZfUNYRvN7Dxr4ExxQGuw9Xq/go",
	"mQQpHWGca8bi9GWIZU1T83RYLAUxVA4vjwx75MADdN6Gv6copYvZhSF1tPYiRkf9aUy0x4By4EwI1+zT",
	"NLpuphF5NzTiPCZ9jzn5lDJUiUE+cXX7H60glp8Vl12LJMNebNm3RiCDrrPVkwWamdkFRFFk2v0Zn/bt",
	"UTvvkXPd7F/V5FdRtm/R88rukS+ck36WT9doGql/P7cbxyNkvlsvJZr+MCtsUPAp0VGK57O7dzhLNMvz",
	"LxH5Kyz1W49byOCNfrgr9HhR6HRLzHTeoaiJNM1c3/8JAAD//3tzzkZsBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi.T, err error) {
	resolvePath := PathToRawSpec("")
	_ = resolvePath // TODO: Use resolvePath when ReadFromURIFunc is implemented

	loader := openapi.NewLoader()
	loader.IsExternalRefsAllowed = true
	// TODO: Add ReadFromURIFunc support to our abstraction layer
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	// Use LoadFromDataWithBasePath with current directory as base path
	swagger, err = loader.LoadFromDataWithBasePath(specData, ".")
	if err != nil {
		return
	}
	return
}
