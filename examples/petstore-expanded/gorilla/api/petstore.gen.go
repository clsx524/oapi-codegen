// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/oapi-codegen/v2/pkg/openapi"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name Name of the pet
	Name string `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Name Name of the pet
	// ID Unique id of the pet

	// ID Unique id of the pet
	ID int64 `json:"id"`

	Name string `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// Tags tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = NewPet

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id int64)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/pets", wrapper.FindPets).Methods("GET")

	r.HandleFunc(options.BaseURL+"/pets", wrapper.AddPet).Methods("POST")

	r.HandleFunc(options.BaseURL+"/pets/{id}", wrapper.DeletePet).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/pets/{id}", wrapper.FindPetByID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXW48byc39K0R932OnNbEXedBTvB4vICBrT+LdvKzngdNNSVzUpafI0lgY6L8HrG7d",
	"RvJsggRBgrzo0l3sOjznkMV+dl0KQ4oUVdz82Um3poD154ecU7YfQ04DZWWql7vUk333JF3mQTlFNx8X",
	"Q73XuGXKAdXNHUd9+8Y1TrcDjX9pRdntGhdIBFfffND+9iFUNHNcud2ucZkeC2fq3fwXN224X36/a9xH",
	"erojvcQdMVzZ7iMGgrQEXRMMpJcbNk5xdRn303Z4Pe4F0Lq7wZuwofeflm7+y7P7/0xLN3f/NzsKMZtU",
	"mE257JqXyXB/CennyI+FgPtzXKdi/OG7K2K8QMq9u9/d7+wyx2UaJY+KXcVNAdm7ucOBlTD8UZ5wtaLc",
	"cnLNRLH7PF6Dd3cL+IkwuMaVbEFr1UHms9lJ0K55kcU7EAyDpxqta1QoQgJo2YimTIACGIG+jss0QU8h",
	"RdGMSrAk1JJJgGPl4NNA0Z70tr0BGajjJXdYt2qc546i0NEc7t2A3ZrgTXtzgfnp6anFertNeTWbYmX2",
	"p8X7Dx8/f/jdm/amXWvw1TGUg3xafqa84Y6uJj6ra2YmB6s/Ze1uytM1bkNZRlZ+3960N/boNFDEgd3c",
	"va2XGjegrqsnZsaQ/ViNFjvn9S+kJUcB9L5SCcucQqVItqIURq7tfxHKsDaWu45EQNOX+BEDCPXQpdhz",
	"oKglAIm28CNSRxEFlMKQMgiuWJUFBAem2ECkDvI6xa4ICIWTBayAgbSFdxQJI6DCKuOGewQsq0INYAeM",
	"XfFcQ1t4XzI+sJYMqecEPmUKDaQcMRPQihTI04QuUtdAV7IUsZLw1GmRFm4LCwQGLXlgaWAofsMRs+1F",
	"OVnSDSjHjvsSFTaYuQj8WkRTC4sIa+xgbSBQhGDwqITQc6clGB2LsagsF+x5YOk4rgCjWjbH3D2visdD",
	"5sMaM2nGPYm2HkLyJMoEHAbKPRtTf+UNhjEh9PxYMEDPaMxkFHi03DbkWSGmCJqypmyU8JJif9i9hbuM",
	"JBTVYFLkcARQckTYJF90QIUNRYpogEdy7SNgyfaMRTw+eUl5Yn2JHXuWs03qDvbRHPXtQFKPnkzYvjEe",
	"O8qolph9t/C5yECxZ2PZo5mnTz7lxhwo1Km5uWZZrWJZN7ChNXfFI1hry30J4PmBcmrhx5QfGKiwhNSf",
	"ymC3q7E9dhwZ2y/xS/xMfVWiCCzJzOfTQ8o1gNLRMbloLqEFq42A9YET+Sy+ASpn1TJKDr6YD82dLdyt",
	"Ucj7sTAGylN4pbnKSwpLLB0/lJFw3O9j607jN+Qn6XhDOWNzvrXVCXDfHAox8sO6hZ8VBvKeopLYyTEk",
	"KWSVtC+iFowK3FeBFd2ey/2T9mlVJpsK5GCLWGIHmlm0HkwbVqQWfijSEZDWbtAXPlSBdQrpyFPmCmf0",
	"7z4gmFsKVvN0JQhGCLiylMlParXw5zKGhuRNt1E9KqN3jlCaQ/MBLJ0VybhysueY9mSOqckcqtHMYgID",
	"x+YIZSrcyMJ7wGIYOtbSs0EVQSi699kk5LjTGWl1vxbuToWpzE0Yh0zKJZx0rtE0pTnxt7Xe9oudcTY0",
	"1PNu0bu5+4Fjb+dLPTayEUBZ6hRyflgorqzvw5K9UoaHrbNhwM3dY6G8PZ70ts6djg9L9ELNNEXWQUUp",
	"1EPpcqwaL2DOuLX/ott6Dtq8Uieec0gBv3Kwvl7CA2UbcTJJ8Vpx5nq4fQOk58D6OsrfHFh39xYvgzWf",
	"ms6bm5v9ZERxnOiGwU+zxexXMczP13h4bdwbZ70XzOwuRqSBFPZgxgFqicXrP4TnNRjj4H9l4xLp62DN",
	"17r0uKZxUkLAvL0yYhi2IcmVYeR9JtQ61UV6srX7ca1OPnZKj9htiU183qcn6i/s/K43N0/Skuj3qd/+",
	"y1jYz96XNNyRmumw7+3rAPvMYpoL7f5Jz/ymVf57rHEheL1fJ9bZM/e70SKe9Mor2njdYoXjytf3GnhA",
	"a8RpdM3iFqRYTlc8clujR5u82vMWt9ZUhlHbCcvUUGzEPvYT7i+U/lYvuf6+ddlLvrvM2oCMKPr/JCFv",
	"D2JUFbawuDV4r79ynCt20HFx+60D6vttvff367Uk7db/Nrn+Z8v4haKj+nUJ5c1epvP35v1re3vy7msv",
	"sLv73d8CAAD//1ZpQth8EgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi.T, err error) {
	resolvePath := PathToRawSpec("")
	_ = resolvePath // TODO: Use resolvePath when ReadFromURIFunc is implemented

	loader := openapi.NewLoader()
	loader.IsExternalRefsAllowed = true
	// TODO: Add ReadFromURIFunc support to our abstraction layer
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	// Use LoadFromDataWithBasePath with current directory as base path
	swagger, err = loader.LoadFromDataWithBasePath(specData, ".")
	if err != nil {
		return
	}
	return
}
